# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# Set LS_COLORS environment by Deepin
if [[ ("$TERM" = *256color || "$TERM" = screen* || "$TERM" = xterm* ) && -f /etc/lscolor-256color ]]; then
    eval $(dircolors -b /etc/lscolor-256color)
else
    eval $(dircolors)
fi

## 扩展用户环境变量 vi ~/.bashrc   永久配置方法 sudo vi /etc/bash.bashrc  source /etc/bash.bashrc

# 配置scala-sdk
#export SCALA_HOME=/media/zgq/data/code/github.com/scala/scala-2.13.3
export SCALA_HOME=/usr
export PATH=${SCALA_HOME}/bin:$PATH

#gradle-6.2.2
export GRADLE_HOME=/media/zgq/data/code/github.com/stress-test/gatling-api-test/gradle/gradle-6.2.2
export PATH=$GRADLE_HOME/bin:$PATH

#go环境变量配置  在deepin上搭建Go开发环境   https://dl.google.com/go/go1.15.3.linux-amd64.tar.gz
export GOROOT=/usr/local/go
export GOPATH=/go   #sudo chmod -R 777 /go
export PATH=$PATH:$GOROOT/bin
export GOPROXY=https://mirrors.aliyun.com/goproxy/
##解决go包管理代理网址无法访问：proxy.golang.org
#go env -w GOPROXY=https://goproxy.cn
#go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/


# 在最后一行添加 vim /etc/profile
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
#source /etc/profile


# 修改hey名（看起来舒服简单）
$ mv hey_linux_amd64 hey
$ # 将hey移动到/usr/bin中
$ mv hey /usr/bin
$ # 给权限
$ chmod +x hey

#hey环境变量   /usr/bin/hey
export HEYROOT=/usr/local/hey
export HEYPATH=/hey
export PATH=$PATH:/usr/local/hey

# 配置java环境变量  /usr/lib/jvm/java-11-openjdk-amd64/bin  /opt/java/jdk-11.0.7
export JAVA_HOME=/opt/java/jdk-11.0.7
#export JAVA_HOME=/opt/java/java-1.8.0-openjdk-amd64
export CLASS_PATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
export JRE_HOME=$JAVA_HOME/jre



#node
export NODE_HOME=/media/zgq/data/testerhome/node/node-v12.14.1-linux-x64  
export PATH=$PATH:$NODE_HOME/bin 
export NODE_PATH=$NODE_HOME/lib/node_modules

#cypress
export CYPRESS_HOME=/media/zgq/data/testerhome/node/node-v12.14.1-linux-x64/lib/node_modules/cypress
export PATH=$PATH:CYPRESS_HOME/bin


#android
export ANDROID_HOME=/media/zgq/data/testerhome/macaca/android-sdk-linux
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

#gradle-6.2.2
export GRADLE_HOME=/media/zgq/data/code/github.com/stress-test/gatling-api-test/gradle/gradle-6.2.2
export PATH=$GRADLE_HOME/bin:$PATH

#NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm


##python3.7.6
#export PYTHON_HOME=/usr/local
export PATH=$PATH:$HOME/bin:/usr/local/python3.7.6/bin

#zookeeper
export ZK_HOME=/media/zgq/data/code/github.com/micro-services/zookeeper-3.4.14
export PATH=$ZK_HOME/bin:$PATH
